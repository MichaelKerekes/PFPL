------------------------------------------------------------------------------
--
------------------------------------------------------------------------------

import Core

------------------------------------------------------------------------------
--
------------------------------------------------------------------------------

type Mu a = Mu (Mu a -> a)

------------------------------------------------------------------------------
--
------------------------------------------------------------------------------

w : (Mu a -> a) -> a
w muAToA = muAToA (Mu muAToA)

u : (a -> a) -> Mu a -> a
u f (Mu muAToA) = f (w muAToA)

y : (a -> a) -> a
y f = w (u f)
--  = u f (Mu (u f))
--  = f (w (u f))

------------------------------------------------------------------------------
--
------------------------------------------------------------------------------

y' : (a -> a) -> a
y' = w << u

------------------------------------------------------------------------------
--  as = Cons 'a' as
------------------------------------------------------------------------------

as = y  (Cons 'a')
bs = y' (Cons 'b')
